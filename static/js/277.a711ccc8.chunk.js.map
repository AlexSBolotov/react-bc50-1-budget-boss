{"version":3,"file":"static/js/277.a711ccc8.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/modules/shared/components/BalanceModal/BalanceModal.module.css?a3b1","modules/shared/components/BalanceModal/BalanceModal.jsx","webpack://react-homework-template/./src/modules/shared/components/Balance/Balance.module.css?7359","modules/shared/components/Balance/BtnConfirmBalance.jsx","modules/shared/components/Balance/Balance.jsx","modules/shared/images/svg/diagram.svg","webpack://react-homework-template/./src/modules/moduleHome/components/ReportsLink/ReportsLink.module.css?b743","modules/moduleHome/components/ReportsLink/ReportsLink.jsx","webpack://react-homework-template/./src/modules/moduleHome/components/TransactionsNav/TransactionsNav.module.css?1181","modules/moduleHome/components/TransactionsNav/TransactionsNav.jsx","modules/moduleHome/components/HomeBar/HomeBar.jsx","webpack://react-homework-template/./src/modules/moduleHome/components/TransactionsSummary/TransactionsSummary.module.css?ef1a","modules/moduleHome/components/TransactionsSummary/monthTranslation.js","redux/transaction/transactionSelectors.js","modules/moduleHome/components/TransactionsSummary/TransactionsSummary.jsx","modules/moduleHome/components/TransactionForm/translateFunc.js","modules/moduleHome/components/TransactionsList/TransactionsList.jsx","webpack://react-homework-template/./src/modules/moduleHome/components/TransactionListMobile/TransactionListMobile.module.scss?4864","modules/moduleHome/components/TransactionListMobile/TransactionListMobile.jsx","modules/moduleHome/components/TransactionContainer/TransactionContainer.jsx","webpack://react-homework-template/./src/modules/moduleHome/components/TransactionForm/TransactionForm.module.scss?a908","modules/moduleHome/components/TransactionForm/TransactionForm.jsx","modules/moduleHome/components/TransactionDate/TransactionDate.jsx","pages/Home/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDiv\":\"BalanceModal_modalDiv__EwDTa\",\"largeText\":\"BalanceModal_largeText__JMYgr\",\"littleText\":\"BalanceModal_littleText__gggvz\"};","import s from './BalanceModal.module.css';\n\nconst BalanceModal = () => {\n  return (\n    <div className={s.fixedModal}>\n      <div className={s.modalDiv}>\n        <p className={s.largeText}>\n          Hello! To get started, enter the current balance of your account!\n        </p>\n        <p className={s.littleText}>\n          You can't spend money until you have it :)\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default BalanceModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"balance_form\":\"Balance_balance_form__UvNxu\",\"balance_title\":\"Balance_balance_title__1fLzW\",\"balance_submit\":\"Balance_balance_submit__bdTky\",\"balance_value\":\"Balance_balance_value__15Q2X\",\"balance_value_none\":\"Balance_balance_value_none__Vt4+d\",\"balance_value_span\":\"Balance_balance_value_span__vYE5M\",\"balance_submit_none\":\"Balance_balance_submit_none__w9YIs\"};","\nimport { useDispatch } from 'react-redux';\nimport { updateUserBalanceApi } from '../../../../services/kapustaApi';\nimport s from './Balance.module.css';\n\nconst BtnConfirmBalance = ({ input, displayStyle }) => {\n  const dispatch = useDispatch();\n\n  const addBalance = () => {\n    const newBalance = Number(input);\n\n    if (newBalance > 0) {\n      dispatch(\n        updateUserBalanceApi.handleUpdateUserBalance({ newBalance: newBalance })\n      );\n    } else {\n      alert('The balance must be positive');\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={s.balance_submit}\n      onClick={addBalance}\n    >\n      Confirm\n    </button>\n  );\n};\n\nexport default BtnConfirmBalance;\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport BalanceModal from '../BalanceModal/BalanceModal';\nimport BtnConfirmBalance from './BtnConfirmBalance';\nimport { selectBalance } from 'redux/auth/authSelectors';\n\nimport s from './Balance.module.css';\n\nconst Balance = ({ displayStyle }) => {\n  const initialBalance = useSelector(selectBalance);\n  const [input, setInput] = useState(initialBalance);\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  useEffect(() => {\n    setInput(initialBalance);\n  }, [initialBalance]);\n\n  return (\n    <div className={s.balance_form}>\n      <h2 className={s.balance_title}>Balance:</h2>\n      <span className={s.balance_value_span}>\n        <input\n          className={s.balance_value}\n          name=\"balance\"\n          pattern=\"[0-9, .UAH]*\"\n          title=\"Field must contain only numbers\"\n          type=\"number\"\n          value={input.toFixed(2)}\n          onChange={handleChange}\n          placeholder={`00.00 UAH`}\n        />\n      </span>\n\n      {!initialBalance && (\n        <BtnConfirmBalance input={input} displayStyle={displayStyle} />\n      )}\n      {!initialBalance && <BalanceModal />}\n    </div>\n  );\n};\n\nexport default Balance;\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgDiagram(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 14,\n    height: 14,\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#C7CCDC\",\n    d: \"M0 4.2h3V14H0V4.2ZM5.6 0h2.8v14H5.6V0Zm5.6 8H14v6h-2.8V8Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDiagram);\nexport default __webpack_public_path__ + \"static/media/diagram.68e03afe713740f7b7e7c5db20717faa.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"reports\":\"ReportsLink_reports__VjAVa\"};","import svgDiagram from '../../../shared/images/svg/diagram.svg'\nimport s from './ReportsLink.module.css';\n\nconst ReportsLink = () => {\n  return (\n    <div to=\"/report\" className={s.reports}>\n      Reports\n      <img src={svgDiagram} alt=\"Diagram\"  />\n    </div>\n  );\n};\n\nexport default ReportsLink;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"TransactionsNav_container__q5sT-\",\"one\":\"TransactionsNav_one__m4Ya-\",\"two\":\"TransactionsNav_two__tQ7mV\"};","// export default function TransactionsNav() {\n//   return (\n//     <div>\n//       <button type=\"button\" to=\"expenses\">\n//         Expenses\n//       </button>\n//       <button type=\"button\" to=\"income\">\n//         Income\n//       </button>\n//     </div>\n//   );\n// }\nimport React from 'react';\n// import { Link } from 'react-router-dom';\nimport styles from './TransactionsNav.module.css';\nimport { useDispatch } from 'react-redux';\n\nimport { changeTransactionType } from 'redux/transaction/transactionSlice';\nconst TransactionsNav = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.container}>\n      <button\n        onClick={() => dispatch(changeTransactionType('expenses'))}\n        type=\"button\"\n        // to=\"/expenses\"\n        className={styles.one}\n      >\n        Expenses\n      </button>\n      <button\n        onClick={() => dispatch(changeTransactionType('incomes'))}\n        type=\"button\"\n        // to=\"/income\"\n        className={styles.two}\n      >\n        Income\n      </button>\n    </div>\n  );\n};\n\nexport default TransactionsNav;\n","import Balance from 'modules/shared/components/Balance/Balance';\nimport ReportsLink from 'modules/moduleHome/components/ReportsLink/ReportsLink';\nimport { NavLink } from 'react-router-dom';\nimport TransactionsNav from 'modules/moduleHome/components/TransactionsNav/TransactionsNav';\n\nconst HomeBar = () => {\n  return (\n    <section>\n      <NavLink to=\"/reports\">\n        <ReportsLink />\n      </NavLink>\n      <Balance />\n      <TransactionsNav />\n    </section>\n  );\n};\n\nexport default HomeBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"summaryWrapper\":\"TransactionsSummary_summaryWrapper__sQ0lX\",\"summaryTable\":\"TransactionsSummary_summaryTable__rDROt\",\"summaryTableHeading\":\"TransactionsSummary_summaryTableHeading__SIk7N\",\"summaryTableCell\":\"TransactionsSummary_summaryTableCell__JvlXi\"};","export const monthTranslation = name => {\n  switch (name) {\n    case 'Январь':\n      return 'January';\n    case 'Февраль':\n      return 'February';\n    case 'Март':\n      return 'March';\n    case 'Апрель':\n      return 'April';\n    case 'Май':\n      return 'May';\n    case 'Июнь':\n      return 'June';\n    case 'Июль':\n      return 'July';\n    case 'Август':\n      return 'August';\n    case 'Сентябрь':\n      return 'September';\n    case 'Октябрь':\n      return 'October';\n    case 'Ноябрь':\n      return 'November';\n    case 'Декабрь':\n      return 'December';\n    default:\n      break;\n  }\n};\n\nexport const monthObj = [\n  { '01': 'Январь' },\n  { '02': 'Февраль' },\n  { '03': 'Март' },\n  { '04': 'Апрель' },\n  { '05': 'Май' },\n  { '06': 'Июнь' },\n  { '07': 'Июль' },\n  { '08': 'Август' },\n  { '09': 'Сентябрь' },\n  { 10: 'Октябрь' },\n  { 11: 'Ноябрь' },\n  { 12: 'Декабрь' },\n];\n","// import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectPeriod = state => state.transactions.transaction;\nexport const selectAllCategories = state => state.transactions.categories;\nexport const selectExpensesCategories = state =>\n  state.transactions.expensesCategories;\nexport const selectIncomesCategories = state =>\n  state.transactions.incomesCategories;\nexport const selectSelectedDate = state => state.transactions.selectedDate;\nexport const selectIncomes = state => state.transactions.incomes;\nexport const selectIncomesStats = state => state.transactions.incomesStats;\nexport const selectExpenses = state => state.transactions.expenses;\nexport const selectExpensesStats = state => state.transactions.expensesStats;\nexport const selectCurrentTransactionType = state =>\n  state.transactions.currentTransactionType;\n\nexport const selectNewBalance = state => state.transactions.newBalance;\n","import s from './TransactionsSummary.module.css';\nimport { useSelector } from 'react-redux';\nimport { monthTranslation } from './monthTranslation';\nimport {\n  selectExpensesStats,\n  selectIncomesStats,\n  selectCurrentTransactionType,\n} from 'redux/transaction/transactionSelectors';\nimport { useEffect, useState } from 'react';\n\nconst TransactionsSummary = () => {\n  const expensesStats = useSelector(selectExpensesStats);\n  const incomesStats = useSelector(selectIncomesStats);\n  const currentTransactionType = useSelector(selectCurrentTransactionType);\n\n  console.log(expensesStats);\n  console.log(incomesStats);\n\n  const [incomes, setIncomes] = useState(incomesStats);\n\n  const [expenses, setExpenses] = useState(expensesStats);\n\n  useEffect(() => {\n    setIncomes(incomesStats);\n  }, [incomesStats]);\n\n  useEffect(() => {\n    setExpenses(expensesStats);\n  }, [expensesStats]);\n\n  console.log(incomesStats);\n\n  let summaryData = [];\n\n  if (currentTransactionType === 'incomes') {\n    summaryData =\n      Object.entries(incomes)\n        .slice(0, new Date().getMonth() + 1)\n        .reverse() ?? [];\n  } else {\n    summaryData =\n      Object.entries(expenses)\n        .slice(0, new Date().getMonth() + 1)\n        .reverse() ?? [];\n  }\n\n  return (\n    <>\n      (\n      <div className={s.summaryWrapper}>\n        <table className={s.summaryTable}>\n          <thead className={s.summaryHead}>\n            <tr>\n              <th colSpan=\"2\" className={s.summaryTableHeading}>\n                Summary\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {summaryData.map(el => {\n              if (el[1] === 'N/A') {\n                el[1] = 0;\n              }\n              return (\n                <tr key={`${el[0]}${el[1]}`}>\n                  <td className={s.summaryTableCell}>\n                    {monthTranslation(el[0])}\n                  </td>\n                  <td className={s.summaryTableCell}>{el[1]}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      )\n    </>\n  );\n};\n\nexport default TransactionsSummary;\n","export const categoryTranslationEnToRu = name => {\n    switch (name.trim()) {\n      case 'Products':\n        return 'Продукты';\n      case 'Alcohol':\n        return 'Алкоголь';\n      case 'Entertainment':\n        return 'Развлечения';\n      case 'Health':\n        return 'Здоровье';\n      case 'Transport':\n        return 'Транспорт';\n      case 'Housing':\n        return 'Всё для дома';\n      case 'Technics':\n        return 'Техника';\n      case 'Communal and communication':\n        return 'Коммуналка и связь';\n      case 'Sport and hobby':\n        return 'Спорт и хобби';\n      case 'Education':\n        return 'Образование';\n      case 'Other':\n        return 'Прочее';\n      case 'Salary':\n        return 'З/П';\n      case 'Additional income':\n        return 'Доп. доход';\n      default:\n        break;\n    }\n  };\n  \n  export const categoryTranslationRuToEn = name => {\n    switch (name.trim()) {\n      case 'Продукты':\n        return 'Products';\n      case 'Алкоголь':\n        return 'Alcohol';\n      case 'Развлечения':\n        return 'Entertainment';\n      case 'Здоровье':\n        return 'Health';\n      case 'Транспорт':\n        return 'Transport';\n      case 'Всё для дома':\n        return 'Housing';\n      case 'Техника':\n        return 'Technics';\n      case 'Коммуналка и связь':\n        return 'Communal and communication';\n      case 'Спорт и хобби':\n        return 'Sport and hobby';\n      case 'Образование':\n        return 'Education';\n      case 'Прочее':\n        return 'Other';\n      case 'З/П':\n        return 'Salary';\n      case 'Доп. доход':\n        return 'Additional income';\n      default:\n        break;\n    }\n  };","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteTransaction } from 'redux/transaction/transactionOperations';\nimport {\n  selectCurrentTransactionType,\n  selectExpenses,\n  selectIncomes,\n} from 'redux/transaction/transactionSelectors';\nimport { format } from 'date-fns';\nimport { deleteTransactionById } from 'redux/transaction/transactionSlice';\nimport { getAuthUser } from 'redux/auth/authOperations';\nimport { categoryTranslationRuToEn } from '../TransactionForm/translateFunc';\n\n\nconst formatEventStart = date => {\n  return format(Date.parse(date), 'yyyy-MM-dd');\n};\n\n\nconst TransactionsList = ({ selectedDate }) => {\n  const currentTransactionType = useSelector(selectCurrentTransactionType);\n  const incomes = useSelector(selectIncomes);\n\n  const expenses = useSelector(selectExpenses);\n\n  const dispatch = useDispatch();\n  const normalizedDate = formatEventStart(selectedDate);\n  \n\n  const filteredTransactions =\n    currentTransactionType === 'incomes'\n      ? incomes.filter(transaction => transaction.date === normalizedDate)\n      : expenses.filter(transaction => transaction.date === normalizedDate);\n  \n\n  const handlerDeleteClick = id => {\n    dispatch(deleteTransaction(id));\n    dispatch(deleteTransactionById(id));\n    setTimeout(() => {\n      dispatch(getAuthUser());\n    }, 200);\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Description</th>\n            <th>Category</th>\n            <th>Sum</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {currentTransactionType === 'expenses'\n            ? filteredTransactions.map(trans => (\n                <tr key={trans._id}>\n                  <td>{trans.date}</td>\n                  <td>{trans.description}</td>\n                  <td>{categoryTranslationRuToEn(trans.category)}</td>\n                  <td>{`${trans.amount} UAH`}</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      onClick={() => handlerDeleteClick(trans._id)}\n                    >\n                      delete\n                    </button>\n                  </td>\n                </tr>\n              ))\n            : filteredTransactions.map(trans => (\n                <tr key={trans._id}>\n                  <td>{trans.date}</td>\n                  <td>{trans.description}</td>\n                  <td>{categoryTranslationRuToEn(trans.category)}</td>\n                  <td>{`${trans.amount} UAH`}</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      onClick={() => handlerDeleteClick(trans._id)}\n                    >\n                      delete\n                    </button>\n                  </td>\n                </tr>\n              ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TransactionsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"mobileContainer\":\"TransactionListMobile_mobileContainer__uE4Bu\",\"mobileList\":\"TransactionListMobile_mobileList__-SSwa\",\"mobileItem\":\"TransactionListMobile_mobileItem__3QJKX\",\"categoryContainer\":\"TransactionListMobile_categoryContainer__8jRZM\",\"categoryDescription\":\"TransactionListMobile_categoryDescription__X4to-\",\"categoryWrapper\":\"TransactionListMobile_categoryWrapper__BPgQH\",\"transactionDate\":\"TransactionListMobile_transactionDate__RSslA\",\"ammountWrapper\":\"TransactionListMobile_ammountWrapper__XEOsv\",\"transactionAmount\":\"TransactionListMobile_transactionAmount__jQPoP\"};","import { useMediaQuery } from 'react-responsive';\nimport s from './TransactionListMobile.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTransaction } from 'redux/transaction/transactionOperations';\nimport {\n  selectCurrentTransactionType,\n  selectExpenses,\n  selectIncomes,\n} from 'redux/transaction/transactionSelectors';\nimport { format } from 'date-fns';\nimport { deleteTransactionById } from 'redux/transaction/transactionSlice';\nimport { getAuthUser } from 'redux/auth/authOperations';\n\nconst formatEventStart = date => {\n  return format(Date.parse(date), 'yyyy-MM-dd');\n};\n\nconst TransactionsListMobile = ({ selectedDate }) => {\n  //   console.log(selectedDate);\n  const isMobile = useMediaQuery({ maxWidth: 768 });\n\n  const currentTransactionType = useSelector(selectCurrentTransactionType);\n  const incomes = useSelector(selectIncomes);\n  const expenses = useSelector(selectExpenses);\n\n  const dispatch = useDispatch();\n  const normalizedDate = formatEventStart(selectedDate);\n\n  const filteredTransactions =\n    currentTransactionType === 'incomes'\n      ? incomes.filter(transaction => transaction.date === normalizedDate)\n      : expenses.filter(transaction => transaction.date === normalizedDate);\n  // console.log(isMobile);\n\n  const handlerDeleteClick = id => {\n    dispatch(deleteTransaction(id));\n    dispatch(deleteTransactionById(id));\n    setTimeout(() => {\n      dispatch(getAuthUser());\n    }, 200);\n  };\n  // console.log(currentTransactionType);\n  // console.log(filteredTransactions);\n\n  return (\n    <div className={s.mobileContainer}>\n      {isMobile && (\n        <ul className={s.mobileList}>\n          {filteredTransactions.map(el => (\n            <li className={s.mobileItem} key={el._id}>\n              <div className={s.categoryContainer}>\n                <p className={s.categoryDescription}>{el.description}</p>\n                <div className={s.categoryWrapper}>\n                  <span className={s.transactionDate}>{el.date}</span>\n                  <span>{el.category}</span>\n                </div>\n              </div>\n              <div className={s.ammountWrapper}>\n                <p className={s.transactionAmount}>\n                  {el.amount} {'UAH'}\n                </p>\n                <button onClick={() => handlerDeleteClick(el._id)}>\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default TransactionsListMobile;\n","import TransactionsSummary from 'modules/moduleHome/components/TransactionsSummary/TransactionsSummary';\nimport TransactionsList from 'modules/moduleHome/components/TransactionsList/TransactionsList';\nimport TransactionsListMobile from '../TransactionListMobile/TransactionListMobile';\n\nconst TransactionContainer = ({ selectedDate }) => {\n  return (\n    <section>\n      <TransactionsList selectedDate={selectedDate} />\n      <TransactionsSummary />\n      <TransactionsListMobile selectedDate={selectedDate} />\n    </section>\n  );\n};\n\nexport default TransactionContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"TransactionForm_input__hcPPg\",\"select\":\"TransactionForm_select__FnciQ\",\"input_calc\":\"TransactionForm_input_calc__PnHCG\",\"btn_input\":\"TransactionForm_btn_input__T6iv1\",\"btn_clear\":\"TransactionForm_btn_clear__V56ge\"};","// import Select from 'react-select';\nimport { format } from 'date-fns';\nimport s from './TransactionForm.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectCurrentTransactionType,\n  selectExpensesCategories,\n  selectIncomesCategories,\n} from 'redux/transaction/transactionSelectors';\nimport {\n  addTransactionExpense,\n  addTransactionIncome,\n} from 'redux/transaction/transactionOperations';\nimport { getAuthUser } from 'redux/auth/authOperations';\nimport {\n  categoryTranslationEnToRu,\n  categoryTranslationRuToEn,\n} from './translateFunc';\n\nconst formatEventStart = date => {\n  return format(Date.parse(date), 'yyyy-MM-dd');\n};\nconst TransactionForm = ({ selectedDate }) => {\n  const currentTransactionType = useSelector(selectCurrentTransactionType);\n  const expensesCategories = useSelector(selectExpensesCategories);\n  const incomesCategories = useSelector(selectIncomesCategories);\n\n\n  const dispatch = useDispatch();\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const amount = e.target.elements.amount.value;\n    const description = e.target.elements.description.value;\n    const category = categoryTranslationEnToRu(\n      e.target.elements.categories.value\n    );\n    const date = formatEventStart(selectedDate);\n    const payload = {\n      description,\n      amount: Number(amount),\n      date,\n      category,\n    };\n    console.log('payload', payload);\n    if (currentTransactionType === 'expenses') {\n      dispatch(addTransactionExpense(payload));\n      setTimeout(() => {\n        dispatch(getAuthUser());\n      }, 200);\n    } else {\n      dispatch(addTransactionIncome(payload));\n      setTimeout(() => {\n        dispatch(getAuthUser());\n      }, 200);\n    }\n  };\n  return (\n    <div>\n      <form onSubmit={e => handleFormSubmit(e)}>\n        <input\n          type=\"text\"\n          name=\"description\"\n          placeholder=\"Product description\"\n          className={s.input}\n        />\n        <select name=\"categories\" className={s.select}>\n          {currentTransactionType === 'expenses'\n            ? expensesCategories.map(category => (\n                <option value={categoryTranslationRuToEn(category)}>\n                  {categoryTranslationRuToEn(category)}\n                </option>\n              ))\n            : incomesCategories.map(category => (\n                <option value={categoryTranslationRuToEn(category)}>\n                  {categoryTranslationRuToEn(category)}\n                </option>\n              ))}\n        </select>\n        <input\n          type=\"number\"\n          name=\"amount\"\n          placeholder=\"0.00\"\n          className={s.input_calc}\n        />\n        <button type=\"submit\" className={s.btn_input}>\n          Input\n        </button>\n        <button type=\"reset\" className={s.btn_clear}>\n          Clear\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default TransactionForm;\n","import { forwardRef } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './TransactionDate.scss';\nimport { enGB } from 'date-fns/locale';\n\nconst TransactionDate = ({ selectedDate, setSelectedDate }) => {\n  const ExampleCustomInput = forwardRef(({ value, onClick, onChange }, ref) => (\n    <input\n      value={value}\n      className=\"icon-input\"\n      onClick={onClick}\n      onChange={onChange}\n      ref={ref}\n      onKeyDown={e => {\n        e.preventDefault();\n      }}\n    ></input>\n  ));\n  return (\n    <div className=\"wrapper-container\">\n      <DatePicker\n        dateFormat=\"dd.MM.yyyy\"\n        selected={selectedDate}\n        onChange={date => {\n          setSelectedDate(date);\n          // console.log(selectedDate);\n        }}\n        locale={enGB}\n        maxDate={new Date()}\n        customInput={<ExampleCustomInput />}\n      />\n    </div>\n  );\n};\nexport default TransactionDate;\n// допилить логику перезагрузки страницы. Если выбираем дату на дейт пикере а потом обновляем страницу - дата ставится на сегодня.\n// МЕМОИЗАЦИЯ\n","import HomeBar from 'modules/moduleHome/components/HomeBar/HomeBar';\nimport TransactionContainer from 'modules/moduleHome/components/TransactionContainer/TransactionContainer';\nimport TransactionForm from 'modules/moduleHome/components/TransactionForm/TransactionForm';\n// import s from 'pages/Home/Home.module.scss';\nimport TransactionDate from 'modules/moduleHome/components/TransactionDate/TransactionDate';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getTransactionExpenseCategories,\n  getTransactionIncomeCategories,\n} from 'redux/reports/reportsOperations';\nimport {\n  getTransactionIncome,\n  getTransactionExpense,\n} from 'redux/transaction/transactionOperations';\n// import { getTransactionExpenseCategories } from 'redux/reports/reportsOperations';\nimport { useDispatch } from 'react-redux';\nimport {\n  // selectExpensesCategories,\n  // selectIncomesCategories,\n  selectCurrentTransactionType,\n} from 'redux/transaction/transactionSelectors';\nconst Home = () => {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const dispatch = useDispatch();\n  // const expensesCategories = useSelector(selectExpensesCategories);\n  // const incomesCategories = useSelector(selectIncomesCategories);\n  const currentTransactionType = useSelector(selectCurrentTransactionType);\n  console.log(currentTransactionType);\n  useEffect(() => {\n    dispatch(getTransactionExpenseCategories());\n    dispatch(getTransactionIncomeCategories());\n    dispatch(getTransactionIncome());\n    dispatch(getTransactionExpense());\n  }, [dispatch]);\n  return (\n    <section>\n      <HomeBar />\n      <TransactionDate\n        selectedDate={selectedDate}\n        setSelectedDate={setSelectedDate}\n      />\n      <TransactionForm selectedDate={selectedDate} />\n      <TransactionContainer selectedDate={selectedDate} />\n    </section>\n  );\n};\n\nexport default Home;\n"],"names":["_jsx","className","s","children","_jsxs","_ref","input","dispatch","displayStyle","useDispatch","type","onClick","newBalance","Number","updateUserBalanceApi","alert","initialBalance","useSelector","selectBalance","_useState","useState","_useState2","_slicedToArray","setInput","useEffect","name","pattern","title","value","toFixed","onChange","e","target","placeholder","BtnConfirmBalance","BalanceModal","to","src","svgDiagram","alt","styles","changeTransactionType","NavLink","ReportsLink","Balance","TransactionsNav","monthTranslation","selectExpensesCategories","state","transactions","expensesCategories","selectIncomesCategories","incomesCategories","selectIncomes","incomes","selectIncomesStats","incomesStats","selectExpenses","expenses","selectExpensesStats","expensesStats","selectCurrentTransactionType","currentTransactionType","console","log","setIncomes","_useState3","_useState4","setExpenses","_Object$entries$slice","_Object$entries$slice2","summaryData","Object","entries","slice","Date","getMonth","reverse","_Fragment","colSpan","map","el","concat","categoryTranslationRuToEn","trim","date","selectedDate","normalizedDate","format","parse","filteredTransactions","filter","transaction","handlerDeleteClick","id","deleteTransaction","deleteTransactionById","setTimeout","getAuthUser","trans","description","category","amount","_id","isMobile","useMediaQuery","maxWidth","TransactionsList","TransactionsSummary","TransactionsListMobile","handleFormSubmit","preventDefault","elements","categoryTranslationEnToRu","categories","formatEventStart","payload","addTransactionExpense","addTransactionIncome","onSubmit","setSelectedDate","ExampleCustomInput","forwardRef","_ref2","ref","onKeyDown","DatePicker","dateFormat","selected","locale","enGB","maxDate","customInput","getTransactionExpenseCategories","getTransactionIncomeCategories","getTransactionIncome","getTransactionExpense","HomeBar","TransactionDate","TransactionForm","TransactionContainer"],"sourceRoot":""}